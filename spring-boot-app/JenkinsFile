pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // Usando credenciais para GitHub, se necessário
        withCredentials([string(credentialsId: 'gittokem', variable: 'GITHUB_TOKEN')]) {
          git branch: 'main', url: 'https://github.com/fcbsousa20/java-maven-sonar-argocd-helm-k8s.git'
        }
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // Build do projeto e criação do JAR
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.58.14.37:9000" // Corrigido: removido o "http://" duplicado
      }
      steps {
        withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "sunitabachhav2007/ultimate-cicd:${BUILD_NUMBER}"
        DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile" // Caminho para o Dockerfile
        REGISTRY_CREDENTIALS = credentials('docker-cred') // Usando credenciais para Docker
      }
      steps {
        script {
          // Construção da imagem Docker com caminho explícito para o Dockerfile
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -f ${DOCKERFILE_LOCATION} -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "DOCK TOKEN") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "java-maven-sonar-argocd-helm-k8s"
        GIT_USER_NAME = "fcbsousa20"
      }
      steps {
        withCredentials([string(credentialsId: 'gittokem', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "fcbsousa20@gmail.com"
            git config user.name "fcbsousa20"
            BUILD_NUMBER=${BUILD_NUMBER}
            # Para sistemas Unix, usar o seguinte comando sed, altere para macOS se necessário (com sufixo '')
            sed -i "s/ultimate-cicd.*/ultimate-cicd:${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
